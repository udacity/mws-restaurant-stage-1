"use strict";const API_URL="http://localhost:1337/restaurants";let restaurants,neighborhoods,cuisines,fetchStatus=0;class IDbOperationsHelper{static checkForIDbSupport(){return"indexedDB"in window?1:0}static openIDb(e,t,n){return idb.open(e,t,e=>{e.createObjectStore(n,{autoIncrement:!0})})}static addToDb(e,t,n,r){e.then(e=>{const a=e.transaction(t,n);return a.objectStore(t).put(r),a.complete}).then(e=>{console.log("Restaurant saved to IDb")})}static getAllData(e,t,n){e.then(e=>e.transaction(t).objectStore(n).getAll()).then(e=>{IDbOperationsHelper.setRestaurantsData(e)})}static getRestaurantsFromServer(e,t,n,r){fetch(API_URL).then(e=>e.json()).then(a=>{a.forEach(e=>{e=IDbOperationsHelper.addMissingData(e)}),1!=fetchStatus&&(fetchStatus=1,a.forEach(r=>{IDbOperationsHelper.addToDb(e,t,n,r)})),console.log(a),r(null,a)}).catch(e=>{console.log(`Unable to fetch restaurants, Error: ${e}`),r(e,null)})}static getRestaurantsData(e){let t=IDbOperationsHelper.openIDb("restaurants-data",1,"restaurants");t.then(e=>e.transaction("restaurants").objectStore("restaurants").getAll()).then(n=>{n.length<=0?IDbOperationsHelper.getRestaurantsFromServer(t,"restaurants","readwrite",e):e(null,n)})}static addMissingData(e){return isNaN(e.photograph)?e.photograph=e.id+".jpg":e.photograph=e.photograph+".jpg",e}}class DBHelper{static get NEW_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurantById(e,t){IDbOperationsHelper.getRestaurantsData((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){IDbOperationsHelper.getRestaurantsData((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){IDbOperationsHelper.getRestaurantsData((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){IDbOperationsHelper.getRestaurantsData((r,a)=>{if(r)n(r,null);else{let r=a;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){IDbOperationsHelper.getRestaurantsData((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){IDbOperationsHelper.getRestaurantsData((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return n.addTo(newMap),n}}!function(){function e(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function t(t,n,r){var a,o=new Promise(function(o,s){e(a=t[n].apply(t,r)).then(o,s)});return o.request=a,o}function n(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function r(e,n,r,a){a.forEach(function(a){a in r.prototype&&(e.prototype[a]=function(){return t(this[n],a,arguments)})})}function a(e,t,n,r){r.forEach(function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})})}function o(e,n,r,a){a.forEach(function(a){a in r.prototype&&(e.prototype[a]=function(){return e=this[n],(r=t(e,a,arguments)).then(function(e){if(e)return new i(e,r.request)});var e,r})})}function s(e){this._index=e}function i(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function l(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function u(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new l(n)}function p(e){this._db=e}n(s,"_index",["name","keyPath","multiEntry","unique"]),r(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),o(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(i,"_cursor",["direction","key","primaryKey","value"]),r(i,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(i.prototype[t]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,r),e(n._request).then(function(e){if(e)return new i(e,n._request)})})})}),c.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},n(c,"_store",["name","keyPath","indexNames","autoIncrement"]),r(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),o(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),a(c,"_store",IDBObjectStore,["deleteIndex"]),l.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},n(l,"_tx",["objectStoreNames","mode"]),a(l,"_tx",IDBTransaction,["abort"]),u.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},n(u,"_db",["name","version","objectStoreNames"]),a(u,"_db",IDBDatabase,["deleteObjectStore","close"]),p.prototype.transaction=function(){return new l(this._db.transaction.apply(this._db,arguments))},n(p,"_db",["name","version","objectStoreNames"]),a(p,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[c,s].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),r=n[n.length-1],a=this._store||this._index,o=a[e].apply(a,n.slice(0,-1));o.onsuccess=function(){r(o.result)}})})}),[s,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise(function(a){n.iterateCursor(e,function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():a(r)):a(r)})})})});var d={open:function(e,n,r){var a=t(indexedDB,"open",[e,n]),o=a.request;return o&&(o.onupgradeneeded=function(e){r&&r(new u(o.result,e.oldVersion,o.transaction))}),a.then(function(e){return new p(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}(),navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(function(e){console.log("Worker registered!")}).catch(function(e){console.log(e)});var markers=[];let restaurant;var newMap;document.addEventListener("DOMContentLoaded",e=>{initMap(),fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),initMap=(()=>{self.newMap=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiaW12cG4yMiIsImEiOiJjaml2bnlycGExM3FuM3FxbTc0eWM2NHV2In0.ESs374xN3guFAGO_1EPdmQ",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,a=e[n].value,o=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(a,o,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li");t.setAttribute("tabindex",0);const n=document.createElement("img");n.src=DBHelper.imageUrlForRestaurant(e),n.className="restaurant-img","http://localhost:8080/no-image"==n.src&&(n.src="",n.classList.add("fallback-image-icon")),n.alt=`${e.name} restaurant image`,n.setAttribute("tabindex",0),t.append(n);const r=document.createElement("div");r.className="restaurant-details",t.append(r);const a=document.createElement("h2");a.innerHTML=e.name,a.setAttribute("tabindex",0),r.append(a);const o=document.createElement("p");o.innerHTML=e.neighborhood,o.setAttribute("tabindex",0),r.append(o);const s=document.createElement("p");s.className="rest-address",s.innerHTML="<i class='fa fa-map-marker'></i>"+e.address,s.setAttribute("tabindex",0),r.append(s);const i=document.createElement("a");return i.innerHTML="View Details",i.href=DBHelper.urlForRestaurant(e),i.setAttribute("aria-label",`View details of ${e.name}`),r.append(i),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.newMap);t.on("click",function(){window.location.href=t.options.url}),self.markers.push(t)})}),document.addEventListener("DOMContentLoaded",e=>{initMap()}),initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.newMap=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiaW12cG4yMiIsImEiOiJjaml2bnlycGExM3FuM3FxbTc0eWM2NHV2In0.ESs374xN3guFAGO_1EPdmQ",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap))})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML="<i class='fa fa-map-marker'></i>"+e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),"http://localhost:8080/no-image"==t.src&&t.classList.add("fallback-image-icon"),t.alt=`${e.name} restaurant image`,document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,r.appendChild(a);const o=document.createElement("td");o.innerHTML=e[n],r.appendChild(o),t.appendChild(r)}}),fillReviewsHTML=((e=self.restaurant.reviews)=>{const t=document.getElementById("reviews-container"),n=document.createElement("h2");if(n.innerHTML="Reviews",n.setAttribute("tabindex",0),t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",e.setAttribute("tabindex",0),void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach(e=>{r.appendChild(createReviewHTML(e))}),t.appendChild(r)}),createReviewHTML=(e=>{const t=document.createElement("li");t.setAttribute("tabindex",0);const n=document.createElement("p");n.className="review-user",n.innerHTML="<i class='fa fa-user'></i>"+e.name,n.setAttribute("tabindex",0),t.appendChild(n);const r=document.createElement("p");r.className="review-date",r.innerHTML="<i class='fa fa-calendar'></i>"+e.date,r.setAttribute("tabindex",0),t.appendChild(r);const a=document.createElement("p");for(a.className="review-rating",a.innerHTML="",a.setAttribute("tabindex",0),a.setAttribute("aria-label",`Rating: ${e.rating} out of 5 stars`),i=0;i<e.rating;i++){let e=document.createElement("i");e.className="fa fa-star",a.appendChild(e)}for(i=e.rating;i<5;i++){let e=document.createElement("i");e.className="far fa-star",a.appendChild(e)}t.appendChild(a);const o=document.createElement("p");return o.className="review-comments",o.innerHTML=e.comments,o.setAttribute("tabindex",0),t.appendChild(o),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
