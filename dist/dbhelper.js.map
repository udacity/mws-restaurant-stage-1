{"version":3,"sources":["../js/dbhelper.js"],"names":["DBHelper","callback","xhr","XMLHttpRequest","open","DATABASE_URL","onload","status","json","JSON","parse","responseText","restaurants","error","send","id","fetchRestaurants","restaurant","filter","r","length","cuisine","results","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","size","sizesSuffixes","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","port"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8887 // Change this to your server port\r\n    return `http://127.0.0.1:${port}/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.filter(r => r.id == id);\r\n        if (restaurant && restaurant.length > 0) { // Got the restaurant\r\n          callback(null, restaurant[0]);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, size) {\r\n    var sizesSuffixes = {\r\n      'large': '1600_large',\r\n      'medium': '800_medium',\r\n      'small': '350_small',\r\n    }\r\n\r\n    return (`/img/${restaurant.id}-${sizesSuffixes[size]}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}