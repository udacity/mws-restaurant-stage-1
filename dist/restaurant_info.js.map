{"version":3,"sources":["../js/restaurant_info.js"],"names":["restaurant","map","initMap","fetchRestaurantFromURL","error","console","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","innerHTML","address","fillRestaurantPicture","cuisine","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","picture","className","image_large","createElement","setAttribute","imageUrlForRestaurant","image_medium","image","appendChild","operatingHours","hours","key","row","day","time","reviews","container","title","noReviews","forEach","createReviewHTML","review","reviewArticle","reviewHeader","date","rating","comments","breadcrumb","li","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nlet initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nlet fetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nlet fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  fillRestaurantPicture(restaurant);\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n}\r\n\r\nlet fillRestaurantPicture = (restaurant) => {\r\n  const picture = document.getElementById('restaurant-img');\r\n  picture.className = 'restaurant-img'\r\n  \r\n  const image_large = document.createElement('source');\r\n  image_large.setAttribute('media', '(min-width: 1000px)');\r\n  image_large.setAttribute('srcset', DBHelper.imageUrlForRestaurant(restaurant, 'large'));\r\n  image_large.setAttribute('alt', restaurant.name);\r\n\r\n  const image_medium = document.createElement('source');\r\n  image_medium.setAttribute('media', '(min-width: 650px)');\r\n  image_medium.setAttribute('srcset', DBHelper.imageUrlForRestaurant(restaurant, 'medium'));\r\n  image_medium.setAttribute('alt', restaurant.name);\r\n\r\n  const image = document.createElement('img');\r\n  image.setAttribute('srcset', DBHelper.imageUrlForRestaurant(restaurant, 'large'));\r\n  image.setAttribute('src', DBHelper.imageUrlForRestaurant(restaurant, 'large'));\r\n  image.setAttribute('alt', restaurant.name);\r\n\r\n  picture.appendChild(image_large);\r\n  picture.appendChild(image_medium);\r\n  picture.appendChild(image);\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nlet fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    day.className = 'restaurant-day';\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    time.className = 'restaurant-time';\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nlet fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h2');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n\r\n  reviews.forEach(review => {\r\n    container.appendChild(createReviewHTML(review));\r\n  });\r\n  //container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nlet createReviewHTML = (review) => {\r\n  const reviewArticle = document.createElement('article');\r\n  reviewArticle.className = 'review';\r\n\r\n  const reviewHeader = document.createElement('div');\r\n  reviewHeader.className = 'review-header';\r\n  reviewArticle.appendChild(reviewHeader);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = review.name;\r\n  reviewHeader.appendChild(name);\r\n\r\n  const date = document.createElement('h3');\r\n  date.innerHTML = review.date;\r\n  reviewHeader.appendChild(date);\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  rating.className = 'review-rating';\r\n  reviewArticle.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  reviewArticle.appendChild(comments);\r\n\r\n  return reviewArticle;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nlet fillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nlet getParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n"]}