{"version":3,"sources":["main.js","dbhelper.js"],"names":["window","addEventListener","navigator","serviceWorker","register","then","registration","console","log","catch","error","restaurants","neighborhoods","map","cuisines","document","fetchNeighborhoods","fetchCuisines","DBHelper","self","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","createElement","option","value","fillCuisinesHTML","cuisine","innerHTML","google","maps","Map","zoom","center","lat","lng","initMap","loc","keyboardShortcuts","cSelect","updateRestaurants","cIndex","selectedIndex","nIndex","nSelect","resetRestaurants","markers","m","setMap","fillRestaurantsHTML","restaurant","ul","append","createRestaurantHTML","image","alt","name","addMarkersToMap","info","className","li","id","imageUrlForRestaurant","address","urlForRestaurant","more","detail","marker","mapMarkerForRestaurant","appendChild","addListener","location","href","url","push","callback","xhr","XMLHttpRequest","open","DATABASE_URL","onload","status","JSON","parse","responseText","send","fetchRestaurants","find","r","results","filter","cuisine_type","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","_restaurant$photograp","photograph","split","_restaurant$photograp2","_slicedToArray","_restaurant$photograp3","_restaurant$photograp4","ext","Marker","position","latlng","title","animation","Animation","DROP"],"mappings":"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","file":"main.js","sourcesContent":["\r\n\r\n(() => {\r\n    window.addEventListener('load', () => {\r\n        if ('serviceWorker' in navigator) {\r\n            // Register a service worker hosted at the root of the\r\n            // site using the default scope.\r\n            navigator.serviceWorker.register('/sw.js').then(function (registration) {\r\n                console.log('Service worker registration succeeded:', registration);\r\n            }).catch(function (error) {\r\n                console.log('Service worker registration failed:', error);\r\n            });\r\n        } else {\r\n            console.log('Service workers are not supported.');\r\n        }\r\n    });\r\n})();\r\n\r\nlet restaurants, // eslint-disable-line no-unused-vars\r\n    neighborhoods, // eslint-disable-line no-unused-vars\r\n    cuisines; // eslint-disable-line no-unused-vars\r\nlet map; // eslint-disable-line no-unused-vars\r\nlet markers = []; // eslint-disable-line no-unused-vars\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n\r\n    console.log(\"document.activeElement\", document.activeElement);\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        option.name = neighborhood;\r\n        select.append(option);\r\n    });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false,\r\n        keyboardShortcuts: false\r\n    });\r\n    updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n\r\n    const image = document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.alt = `Restaurant ${restaurant.name}`;\r\n    li.append(image);\r\n\r\n    const info = document.createElement('div');\r\n    info.className = 'restaurant-info';\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = restaurant.name;\r\n    name.id = `restaurant-item-${restaurant.id}`;\r\n    info.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    info.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    info.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    more.setAttribute('aria-labelledby', `restaurant-detail-${restaurant.id}`);\r\n    info.append(more);\r\n\r\n    const detail = document.createElement('span');\r\n    detail.hidden = true;\r\n    detail.id = `restaurant-detail-${restaurant.id}`;\r\n    detail.innerHTML = `Restaurant name: ${restaurant.name}, address:${restaurant.address}, click the link to view detail`;\r\n\r\n    li.appendChild(detail);\r\n    li.append(info);\r\n\r\n    return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n};","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper { // eslint-disable-line no-unused-vars\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 8000; // Change this to your server port\r\n        return `http://localhost:${port}/data/restaurants.json`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('GET', DBHelper.DATABASE_URL);\r\n        xhr.onload = () => {\r\n            if (xhr.status === 200) { // Got a success response from server!\r\n                const json = JSON.parse(xhr.responseText);\r\n                const restaurants = json.restaurants;\r\n                callback(null, restaurants);\r\n            } else { // Oops!. Got an error from server.\r\n                const error = (`Request failed. Returned status of ${xhr.status}`);\r\n                callback(error, null);\r\n            }\r\n        };\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        const [name, ext] = restaurant.photograph.split('.');\r\n        return (`/img/${name}-320_small.${ext}`);\r\n    }\r\n\r\n    /**\r\n     * Generate name of different size of images\r\n     */\r\n    static imageSrcset(restaurant) {\r\n        const [name, ext] = restaurant.photograph.split('.');\r\n        return `/img/${name}-320_small.${ext} 400w, /img/${name}-640_medium.${ext} 640w, /img/${name}-800_large.${ext} 800w `;\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n                position: restaurant.latlng,\r\n                title: restaurant.name,\r\n                url: DBHelper.urlForRestaurant(restaurant),\r\n                map: map,\r\n                animation: google.maps.Animation.DROP\r\n            }\r\n        );\r\n        return marker;\r\n    }\r\n\r\n}\r\n"]}