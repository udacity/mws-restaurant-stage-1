{"version":3,"sources":["restaurant_info.js","dbhelper.js"],"names":["window","addEventListener","navigator","serviceWorker","register","then","registration","console","log","error","restaurant","map","initMap","fetchRestaurantFromURL","maps","Map","document","getElementById","zoom","self","scrollwheel","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fillRestaurantHTML","arguments","length","undefined","name","setAttribute","address","image","innerHTML","alt","className","srcset","imageSrcset","cuisine","fillReviewsHTML","fillRestaurantHoursHTML","operatingHours","operating_hours","hours","key","row","createElement","day","time","appendChild","reviews","container","title","noReviews","forEach","review","ul","createReviewHTML","li","wrapper","rating","date","comments","breadcrumb","querySelector","link","href","urlForRestaurant","append","fillBreadcrumb","RegExp","url","results","decodeURIComponent","replace","xhr","XMLHttpRequest","open","DATABASE_URL","onload","status","restaurants","JSON","parse","responseText","send","fetchRestaurants","find","r","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","_restaurant$photograp","photograph","split","_restaurant$photograp2","_slicedToArray","_restaurant$photograp3","_restaurant$photograp4","ext","google","Marker","position","latlng","animation","Animation","DROP"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["(() => {\n    window.addEventListener('load', () => {\n        if ('serviceWorker' in navigator) {\n            // Register a service worker hosted at the root of the\n            // site using the default scope.\n            navigator.serviceWorker.register('/sw.js').then(function (registration) {\n                console.log('Service worker registration succeeded:', registration);\n            }).catch(function (error) {\n                console.log('Service worker registration failed:', error);\n            });\n        } else {\n            console.log('Service workers are not supported.');\n        }\n    });\n})();\n\nlet restaurant; // eslint-disable-line no-unused-vars\nlet map; // eslint-disable-line no-unused-vars\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n    fetchRestaurantFromURL((error, restaurant) => {\n        if (error) {\n            // Got an error!\n            console.error(error);\n        } else {\n            self.map = new google.maps.Map(document.getElementById(\"map\"), {\n                zoom: 16,\n                center: restaurant.latlng,\n                scrollwheel: false\n            });\n            fillBreadcrumb();\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n        }\n    });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = callback => {\n    if (self.restaurant) {\n        // restaurant already fetched!\n        callback(null, self.restaurant);\n        return;\n    }\n    const id = getParameterByName(\"id\");\n    if (!id) {\n        // no id found in URL\n        const error = \"No restaurant id in URL\";\n        callback(error, null);\n    } else {\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n            self.restaurant = restaurant;\n            if (!restaurant) {\n                console.error(error);\n                return;\n            }\n            fillRestaurantHTML();\n            callback(null, restaurant);\n        });\n    }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById(\"restaurant-name\");\n    name.innerHTML = restaurant.name;\n    name.setAttribute('tabindex', '0');\n    name.setAttribute('aria-label', `restaurant ${restaurant.name}`);\n\n    const address = document.getElementById(\"restaurant-address\");\n    address.innerHTML = restaurant.address;\n\n    const image = document.getElementById(\"restaurant-img\");\n    image.className = \"restaurant-img\";\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.alt = `Restaurant ${restaurant.name}`;\n    image.srcset = DBHelper.imageSrcset(restaurant);\n    image.sizes = \"(max-width: 640px) 100vw, 50vw\";\n\n    const cuisine = document.getElementById(\"restaurant-cuisine\");\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById(\"restaurant-hours\");\n    for (let key in operatingHours) {\n        const row = document.createElement(\"tr\");\n\n        const day = document.createElement(\"td\");\n        day.innerHTML = key;\n        row.appendChild(day);\n\n        const time = document.createElement(\"td\");\n        time.innerHTML = operatingHours[key];\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById(\"reviews-container\");\n    const title = document.createElement(\"h3\");\n    title.innerHTML = \"Reviews\";\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement(\"p\");\n        noReviews.innerHTML = \"No reviews yet!\";\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById(\"reviews-list\");\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = review => {\n    const li = document.createElement(\"li\");\n\n    const wrapper = document.createElement(\"article\");\n    wrapper.className = \"review-wrapper\";\n\n    const name = document.createElement(\"h4\");\n    name.className = \"review-name\";\n    name.innerHTML = review.name;\n    wrapper.appendChild(name);\n\n    const rating = document.createElement(\"p\");\n    rating.innerHTML = `${review.rating}`;\n    rating.className = \"review-rating\";\n    wrapper.appendChild(rating);\n\n    li.append(wrapper);\n\n    const date = document.createElement(\"p\");\n    date.innerHTML = review.date;\n    date.className = \"review-date\";\n    li.appendChild(date);\n\n    const comments = document.createElement(\"p\");\n    comments.innerHTML = review.comments;\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.querySelector(\"#breadcrumb\");\n    const li = document.createElement(\"li\");\n    const link = document.createElement('a');\n    link.href = DBHelper.urlForRestaurant(restaurant);\n    link.innerHTML = restaurant.name;\n    link.setAttribute('aria-current', 'page');\n    li.append(link);\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return \"\";\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n};\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper { // eslint-disable-line no-unused-vars\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 8000; // Change this to your server port\r\n        return `http://localhost:${port}/data/restaurants.json`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('GET', DBHelper.DATABASE_URL);\r\n        xhr.onload = () => {\r\n            if (xhr.status === 200) { // Got a success response from server!\r\n                const json = JSON.parse(xhr.responseText);\r\n                const restaurants = json.restaurants;\r\n                callback(null, restaurants);\r\n            } else { // Oops!. Got an error from server.\r\n                const error = (`Request failed. Returned status of ${xhr.status}`);\r\n                callback(error, null);\r\n            }\r\n        };\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        const [name, ext] = restaurant.photograph.split('.');\r\n        return (`/img/${name}-320_small.${ext}`);\r\n    }\r\n\r\n    /**\r\n     * Generate name of different size of images\r\n     */\r\n    static imageSrcset(restaurant) {\r\n        const [name, ext] = restaurant.photograph.split('.');\r\n        return `/img/${name}-320_small.${ext} 400w, /img/${name}-640_medium.${ext} 640w, /img/${name}-800_large.${ext} 800w `;\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n                position: restaurant.latlng,\r\n                title: restaurant.name,\r\n                url: DBHelper.urlForRestaurant(restaurant),\r\n                map: map,\r\n                animation: google.maps.Animation.DROP\r\n            }\r\n        );\r\n        return marker;\r\n    }\r\n\r\n}\r\n"]}