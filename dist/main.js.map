{"version":3,"sources":["../js/main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","initServiceWorker","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","neighborhood","value","appendChild","fillCuisinesHTML","navigator","window","serviceWorker","register","then","registration","log","scope","catch","err","cuisine","initMap","loc","lat","lng","google","maps","Map","zoom","center","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","m","setMap","createRestaurantHTML","restaurant","addMarkersToMap","li","appendRestaurantImage","name","address","more","href","urlForRestaurant","setAttribute","rootElement","picture","className","image_large","imageUrlForRestaurant","image","marker","mapMarkerForRestaurant","addListener","location","url","push"],"mappings":";;AAAA,IAAIA,oBAAJ;AAAA,IACEC,sBADF;AAAA,IAEEC,iBAFF;AAGA,IAAIC,GAAJ;AACA,IAAIC,UAAU,EAAd;;AAEA;;;AAGAC,SAASC,gBAAT,CAA0B,kBAA1B,EAA8C,UAACC,KAAD,EAAW;AACvDC;AACAC;AACAC;AACD,CAJD;;AAMA;;;AAGA,IAAIF,qBAAqB,SAArBA,kBAAqB,GAAM;AAC7BG,WAASH,kBAAT,CAA4B,UAACI,KAAD,EAAQX,aAAR,EAA0B;AACpD,QAAIW,KAAJ,EAAW;AAAE;AACXC,cAAQD,KAAR,CAAcA,KAAd;AACD,KAFD,MAEO;AACLE,WAAKb,aAAL,GAAqBA,aAArB;AACAc;AACD;AACF,GAPD;AAQD,CATD;;AAWA;;;AAGA,IAAIA,wBAAwB,SAAxBA,qBAAwB,GAAwC;AAAA,MAAvCd,aAAuC,uEAAvBa,KAAKb,aAAkB;;AAClE,MAAMe,SAASX,SAASY,cAAT,CAAwB,sBAAxB,CAAf;AACAhB,gBAAciB,OAAd,CAAsB,wBAAgB;AACpC,QAAMC,SAASd,SAASe,aAAT,CAAuB,QAAvB,CAAf;AACAD,WAAOE,SAAP,GAAmBC,YAAnB;AACAH,WAAOI,KAAP,GAAeD,YAAf;AACAN,WAAOQ,WAAP,CAAmBL,MAAnB;AACD,GALD;AAMD,CARD;;AAUA;;;AAGA,IAAIV,gBAAgB,SAAhBA,aAAgB,GAAM;AACxBE,WAASF,aAAT,CAAuB,UAACG,KAAD,EAAQV,QAAR,EAAqB;AAC1C,QAAIU,KAAJ,EAAW;AAAE;AACXC,cAAQD,KAAR,CAAcA,KAAd;AACD,KAFD,MAEO;AACLE,WAAKZ,QAAL,GAAgBA,QAAhB;AACAuB;AACD;AACF,GAPD;AAQD,CATD;;AAWA,IAAIf,oBAAoB,SAApBA,iBAAoB,GAAM;AAC5B,MAAI,mBAAmBgB,SAAvB,EAAkC;AAChCC,WAAOrB,gBAAP,CAAwB,MAAxB,EAAgC,YAAW;AACzCoB,gBAAUE,aAAV,CAAwBC,QAAxB,CAAiC,QAAjC,EAA2CC,IAA3C,CAAgD,UAASC,YAAT,EAAuB;AACrE;AACAlB,gBAAQmB,GAAR,CAAY,oDAAZ,EAAkED,aAAaE,KAA/E;AACD,OAHD,EAGGC,KAHH,CAGS,UAASC,GAAT,EAAc;AACrB;AACAtB,gBAAQmB,GAAR,CAAY,qCAAZ,EAAmDG,GAAnD;AACD,OAND;AAOD,KARD;AASD;AACF,CAZD;;AAcA;;;AAGA,IAAIV,mBAAmB,SAAnBA,gBAAmB,GAA8B;AAAA,MAA7BvB,QAA6B,uEAAlBY,KAAKZ,QAAa;;AACnD,MAAMc,SAASX,SAASY,cAAT,CAAwB,iBAAxB,CAAf;;AAEAf,WAASgB,OAAT,CAAiB,mBAAW;AAC1B,QAAMC,SAASd,SAASe,aAAT,CAAuB,QAAvB,CAAf;AACAD,WAAOE,SAAP,GAAmBe,OAAnB;AACAjB,WAAOI,KAAP,GAAea,OAAf;AACApB,WAAOQ,WAAP,CAAmBL,MAAnB;AACD,GALD;AAMD,CATD;AAUA;;;AAGA,IAAIkB,UAAU,SAAVA,OAAU,GAAM;AAClB,MAAIC,MAAM;AACRC,SAAK,SADG;AAERC,SAAK,CAAC;AAFE,GAAV;AAIA1B,OAAKX,GAAL,GAAW,IAAIsC,OAAOC,IAAP,CAAYC,GAAhB,CAAoBtC,SAASY,cAAT,CAAwB,KAAxB,CAApB,EAAoD;AAC7D2B,UAAM,EADuD;AAE7DC,YAAQP,GAFqD;AAG7DQ,iBAAa;AAHgD,GAApD,CAAX;AAKAC;AACD,CAXD;;AAaA;;;AAGA,IAAIA,oBAAoB,SAApBA,iBAAoB,GAAM;AAC5B,MAAMC,UAAU3C,SAASY,cAAT,CAAwB,iBAAxB,CAAhB;AACA,MAAMgC,UAAU5C,SAASY,cAAT,CAAwB,sBAAxB,CAAhB;;AAEA,MAAMiC,SAASF,QAAQG,aAAvB;AACA,MAAMC,SAASH,QAAQE,aAAvB;;AAEA,MAAMf,UAAUY,QAAQE,MAAR,EAAgB3B,KAAhC;AACA,MAAMD,eAAe2B,QAAQG,MAAR,EAAgB7B,KAArC;;AAEAZ,WAAS0C,uCAAT,CAAiDjB,OAAjD,EAA0Dd,YAA1D,EAAwE,UAACV,KAAD,EAAQZ,WAAR,EAAwB;AAC9F,QAAIY,KAAJ,EAAW;AAAE;AACXC,cAAQD,KAAR,CAAcA,KAAd;AACD,KAFD,MAEO;AACL0C,uBAAiBtD,WAAjB;AACAuD;AACD;AACF,GAPD;AAQD,CAlBD;;AAoBA;;;AAGA,IAAID,mBAAmB,SAAnBA,gBAAmB,CAACtD,WAAD,EAAiB;AACtC;AACAc,OAAKd,WAAL,GAAmB,EAAnB;AACA,MAAMwD,KAAKnD,SAASY,cAAT,CAAwB,kBAAxB,CAAX;AACAuC,KAAGnC,SAAH,GAAe,EAAf;;AAEA;AACAP,OAAKV,OAAL,CAAac,OAAb,CAAqB;AAAA,WAAKuC,EAAEC,MAAF,CAAS,IAAT,CAAL;AAAA,GAArB;AACA5C,OAAKV,OAAL,GAAe,EAAf;AACAU,OAAKd,WAAL,GAAmBA,WAAnB;AACD,CAVD;;AAYA;;;AAGA,IAAIuD,sBAAsB,SAAtBA,mBAAsB,GAAoC;AAAA,MAAnCvD,WAAmC,uEAArBc,KAAKd,WAAgB;;AAC5D,MAAMwD,KAAKnD,SAASY,cAAT,CAAwB,kBAAxB,CAAX;AACAjB,cAAYkB,OAAZ,CAAoB,sBAAc;AAChCsC,OAAGhC,WAAH,CAAemC,qBAAqBC,UAArB,CAAf;AACD,GAFD;AAGAC;AACD,CAND;;AAQA;;;AAGA,IAAIF,uBAAuB,SAAvBA,oBAAuB,CAACC,UAAD,EAAgB;AACzC,MAAME,KAAKzD,SAASe,aAAT,CAAuB,IAAvB,CAAX;;AAEA2C,wBAAsBH,UAAtB,EAAkCE,EAAlC;;AAEA,MAAME,OAAO3D,SAASe,aAAT,CAAuB,IAAvB,CAAb;AACA4C,OAAK3C,SAAL,GAAiBuC,WAAWI,IAA5B;AACAF,KAAGtC,WAAH,CAAewC,IAAf;;AAEA,MAAM1C,eAAejB,SAASe,aAAT,CAAuB,GAAvB,CAArB;AACAE,eAAaD,SAAb,GAAyBuC,WAAWtC,YAApC;AACAwC,KAAGtC,WAAH,CAAeF,YAAf;;AAEA,MAAM2C,UAAU5D,SAASe,aAAT,CAAuB,GAAvB,CAAhB;AACA6C,UAAQ5C,SAAR,GAAoBuC,WAAWK,OAA/B;AACAH,KAAGtC,WAAH,CAAeyC,OAAf;;AAEA,MAAMC,OAAO7D,SAASe,aAAT,CAAuB,GAAvB,CAAb;AACA8C,OAAK7C,SAAL,GAAiB,cAAjB;AACA6C,OAAKC,IAAL,GAAYxD,SAASyD,gBAAT,CAA0BR,UAA1B,CAAZ;AACAM,OAAKG,YAAL,CAAkB,YAAlB,uBAAmDT,WAAWI,IAA9D;AACAF,KAAGtC,WAAH,CAAe0C,IAAf;;AAEA,SAAOJ,EAAP;AACD,CAxBD;;AA0BA,IAAIC,wBAAwB,SAAxBA,qBAAwB,CAACH,UAAD,EAAaU,WAAb,EAA6B;AACvD,MAAMC,UAAUlE,SAASe,aAAT,CAAuB,SAAvB,CAAhB;AACAmD,UAAQC,SAAR,GAAoB,gBAApB;;AAEA,MAAMC,cAAcpE,SAASe,aAAT,CAAuB,QAAvB,CAApB;AACA;AACAqD,cAAYJ,YAAZ,CAAyB,QAAzB,EAAsC1D,SAAS+D,qBAAT,CAA+Bd,UAA/B,EAA2C,OAA3C,CAAtC,aAAiGjD,SAAS+D,qBAAT,CAA+Bd,UAA/B,EAA2C,QAA3C,CAAjG;AACAa,cAAYJ,YAAZ,CAAyB,KAAzB,EAAgCT,WAAWI,IAA3C;;AAEA;AACA;AACA;AACA;;AAEA,MAAMW,QAAQtE,SAASe,aAAT,CAAuB,KAAvB,CAAd;AACAuD,QAAMN,YAAN,CAAmB,QAAnB,EAA6B1D,SAAS+D,qBAAT,CAA+Bd,UAA/B,EAA2C,OAA3C,CAA7B;AACAe,QAAMN,YAAN,CAAmB,KAAnB,EAA0B1D,SAAS+D,qBAAT,CAA+Bd,UAA/B,EAA2C,OAA3C,CAA1B;AACAe,QAAMN,YAAN,CAAmB,KAAnB,EAA0BT,WAAWI,IAArC;;AAEAO,UAAQ/C,WAAR,CAAoBiD,WAApB;AACA;AACAF,UAAQ/C,WAAR,CAAoBmD,KAApB;;AAEAL,cAAY9C,WAAZ,CAAwB+C,OAAxB;AACD,CAxBD;;AA0BA;;;AAGA,IAAIV,kBAAkB,SAAlBA,eAAkB,GAAoC;AAAA,MAAnC7D,WAAmC,uEAArBc,KAAKd,WAAgB;;AACxDA,cAAYkB,OAAZ,CAAoB,sBAAc;AAChC;AACA,QAAM0D,SAASjE,SAASkE,sBAAT,CAAgCjB,UAAhC,EAA4C9C,KAAKX,GAAjD,CAAf;AACAsC,WAAOC,IAAP,CAAYnC,KAAZ,CAAkBuE,WAAlB,CAA8BF,MAA9B,EAAsC,OAAtC,EAA+C,YAAM;AACnDjD,aAAOoD,QAAP,CAAgBZ,IAAhB,GAAuBS,OAAOI,GAA9B;AACD,KAFD;AAGAlE,SAAKV,OAAL,CAAa6E,IAAb,CAAkBL,MAAlB;AACD,GAPD;AAQD,CATD","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  initServiceWorker();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nlet fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nlet fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.appendChild(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nlet fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\nlet initServiceWorker = () => {\r\n  if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function() {\r\n      navigator.serviceWorker.register('/sw.js').then(function(registration) {\r\n        // Registration was successful\r\n        console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n      }).catch(function(err) {\r\n        // registration failed :(\r\n        console.log('ServiceWorker registration failed: ', err);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nlet fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.appendChild(option);\r\n  });\r\n}\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nlet initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nlet updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nlet resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nlet fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.appendChild(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nlet createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  \r\n  appendRestaurantImage(restaurant, li);\r\n  \r\n  const name = document.createElement('h1');\r\n  name.innerHTML = restaurant.name;\r\n  li.appendChild(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.appendChild(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.appendChild(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', `View details of ${restaurant.name}`);\r\n  li.appendChild(more)\r\n\r\n  return li\r\n}\r\n\r\nlet appendRestaurantImage = (restaurant, rootElement) => {\r\n  const picture = document.createElement('picture');\r\n  picture.className = 'restaurant-img';\r\n\r\n  const image_large = document.createElement('source');\r\n  //image_large.setAttribute('media', '(min-width: 1000px)');\r\n  image_large.setAttribute('srcset', `${DBHelper.imageUrlForRestaurant(restaurant, 'large')} 2x, ${DBHelper.imageUrlForRestaurant(restaurant, 'medium')} 1x`);\r\n  image_large.setAttribute('alt', restaurant.name);\r\n\r\n  // const image_medium = document.createElement('source');\r\n  // image_medium.setAttribute('media', '(min-width: 650px) and (max-width: 999px)');\r\n  // image_medium.setAttribute('srcset', DBHelper.imageUrlForRestaurant(restaurant, 'medium'));\r\n  // image_medium.setAttribute('alt', restaurant.name);\r\n\r\n  const image = document.createElement('img');\r\n  image.setAttribute('srcset', DBHelper.imageUrlForRestaurant(restaurant, 'small'));\r\n  image.setAttribute('src', DBHelper.imageUrlForRestaurant(restaurant, 'small'));\r\n  image.setAttribute('alt', restaurant.name);\r\n\r\n  picture.appendChild(image_large);\r\n  //picture.appendChild(image_medium);\r\n  picture.appendChild(image);\r\n\r\n  rootElement.appendChild(picture);\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nlet addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n"]}