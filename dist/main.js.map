{"version":3,"sources":["../js/main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","neighborhood","value","appendChild","fillCuisinesHTML","cuisine","initMap","loc","lat","lng","google","maps","Map","zoom","center","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","m","setMap","createRestaurantHTML","restaurant","addMarkersToMap","li","appendRestaurantImage","name","address","more","href","urlForRestaurant","setAttribute","rootElement","picture","className","image_large","imageUrlForRestaurant","image_medium","image","marker","mapMarkerForRestaurant","addListener","window","location","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nlet fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nlet fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.appendChild(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nlet fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nlet fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.appendChild(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nlet initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nlet updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nlet resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nlet fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.appendChild(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nlet createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  \r\n  appendRestaurantImage(restaurant, li);\r\n  \r\n  const name = document.createElement('h1');\r\n  name.innerHTML = restaurant.name;\r\n  li.appendChild(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.appendChild(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.appendChild(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-label', `View details of ${restaurant.name}`);\r\n  li.appendChild(more)\r\n\r\n  return li\r\n}\r\n\r\nlet appendRestaurantImage = (restaurant, rootElement) => {\r\n  const picture = document.createElement('picture');\r\n  picture.className = 'restaurant-img';\r\n\r\n  const image_large = document.createElement('source');\r\n  image_large.setAttribute('media', '(min-width: 1000px)');\r\n  image_large.setAttribute('srcset', DBHelper.imageUrlForRestaurant(restaurant, 'large'));\r\n  image_large.setAttribute('alt', restaurant.name);\r\n\r\n  const image_medium = document.createElement('source');\r\n  image_medium.setAttribute('media', '(min-width: 650px)');\r\n  image_medium.setAttribute('srcset', DBHelper.imageUrlForRestaurant(restaurant, 'medium'));\r\n  image_medium.setAttribute('alt', restaurant.name);\r\n\r\n  const image = document.createElement('img');\r\n  image.setAttribute('srcset', DBHelper.imageUrlForRestaurant(restaurant, 'large'));\r\n  image.setAttribute('src', DBHelper.imageUrlForRestaurant(restaurant, 'large'));\r\n  image.setAttribute('alt', restaurant.name);\r\n\r\n  picture.appendChild(image_large);\r\n  picture.appendChild(image_medium);\r\n  picture.appendChild(image);\r\n\r\n  rootElement.appendChild(picture);\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nlet addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n"]}